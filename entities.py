from decimal import Decimal

import config
from pony.orm import *

'''
The entity module contains all the entities of your application.
We will be using PonyORM; please, refer to http:ponyorm.com for more info.
'''

# instance of the class Database to create and map tables
db = Database()

#######################################################
### Begin entities declaration
#######################################################

'''
    Book entity class
    ====================
    Each book has a unique id (automatically generated by the DB),
    a title, an author (from the Author table), a publisher (from the Publisher table),
    a genre (from the Genre table), a year, a price and set of orders in which it appears
    used for the n:n relationship between the two tables.
'''


class Book(db.Entity):
    id = PrimaryKey(int, auto=True)
    title = Required(str)
    author = Required('Author')
    publisher = Required('Publisher')
    genre = Required('Genre')
    year = Required(str)
    price = Required(Decimal, precision=10, scale=2)
    orders = Set('Order')


'''
    Author entity class
    ====================
    Each author has a unique id (automatically generated by the DB),
    a first name, a last name and a set of books that had writen used for
    the 1:n relationship between the two tables.
'''


class Author(db.Entity):
    id = PrimaryKey(int, auto=True)
    first_name = Required(str)
    last_name = Required(str)
    books = Set('Book')


'''
    Publisher entity class
    ====================
    Each publisher has a unique id (automatically generated by the DB),
    a name, a country and a set of books that had published used for
    the 1:n relationship between the two tables.
'''


class Publisher(db.Entity):
    id = PrimaryKey(int, auto=True)
    name = Required(str)
    country = Required(str)
    books = Set('Book')


'''
    Genre entity class
    ====================
    Each genre has a unique id (automatically generated by the DB),
    a name and a of books in that given genre used for
    the 1:n relationship between the two tables.
'''


class Genre(db.Entity):
    id = PrimaryKey(int, auto=True)
    name = Required(str)
    books = Set('Book')


'''
    Customer entity class
    ====================
    Each customer has a unique id (automatically generated by the DB),
    a first name, a last name, a phone number, an address, a city, a country
    and a set of orders that had placed used for the 1:n relationship between the two tables.
'''


class Customer(db.Entity):
    id = PrimaryKey(int, auto=True)
    first_name = Required(str)
    last_name = Required(str)
    phone_number = Required(str)
    address = Required(str)
    city = Required(str)
    country = Required(str)
    orders = Set('Order')


'''
    Order entity class
    ====================
    Each order has a unique id (automatically generated by the DB),
    a customer (from the Customer table), a list of books (from the Book table),
    a purchase date and a total cost of all books for the order calculated dynamically.
'''


class Order(db.Entity):
    id = PrimaryKey(int, auto=True)
    customer = Required('Customer')
    books = Set('Book')
    purchase_date = Required(str)
    total = Required(Decimal, precision=10, scale=2)


#######################################################
### END entities declaration
#######################################################

#######################################################
### The following 2 instructions bind the db to the
### SQLite file and generate the tables if needed.
#######################################################
# binding the entities to an sqlite database
db.bind('sqlite', config.DB_FILE_NAME, create_db=True)

# create the tables
db.generate_mapping(create_tables=True)
